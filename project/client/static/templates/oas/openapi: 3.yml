openapi: 3.0.0
info:
  title: Token Registration, Authentication, Post and Draft Management API
  version: 1.0.0
paths:
  /register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: User registered successfully. An email with a confirmation link has been sent to the provided email address.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User registered successfully. Please check your email for confirmation link."
        '400':
          description: Bad request. The request could not be understood or was missing required parameters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid request parameters."
  /confirm-email:
    post:
      summary: Confirm a user's email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Email confirmed successfully. The user's email address has been verified.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email confirmed successfully."
        '400':
          description: Bad request. The confirmation token was invalid or expired.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid or expired confirmation token."
        '401':
          description: Unauthorized. The confirmation token was not provided.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Confirmation token not provided."
  /login:
    post:
      summary: Authenticate a user and return a token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Unauthorized
  /posts:
    get:
      summary: Get a list of posts
      parameters:
        - name: sort
          in: query
          description: Sort posts by date
          schema:
            type: string
            enum: [asc, desc]
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
    post:
      summary: Create a new post
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '201':
          description: Post created successfully
        '400':
          description: Bad request
  /posts/{postId}:
    get:
      summary: Get a specific post by its id
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: Optional authentication token
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '403':
          description: Forbidden
        '404':
          description: Post not found
    put:
      summary: Update a post if the user is the author
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '200':
          description: Post updated successfully
        '400':
          description: Bad request
        '403':
          description: Forbidden
        '404':
          description: Post not found
    delete:
      summary: Delete a post if the user is the author
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Post deleted successfully
        '403':
          description: Forbidden
        '404':
          description: Post not found
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Post:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        author:
          type: string
        draft:
          type: boolean
        date:
          type: string
          format: date-time